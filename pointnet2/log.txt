/home/soaring/diffusion/PDR/pointnet2
PointNet2CloudCondition(
  (class_emb): Embedding(16, 128)
  (network_activation_function): ReLU(inplace=True)
  (global_pnet): Pnet2Stage(
    (mlp1): Mlp_plus_t_emb(
      (first_mlp): Sequential(
        (0): Conv2d(4, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
      (second_mlp): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
    )
    (mlp2): Mlp_plus_t_emb(
      (first_mlp): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
      (second_mlp): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 1024, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
    )
  )
  (fc_t1): Linear(in_features=128, out_features=512, bias=True)
  (fc_t2): Linear(in_features=512, out_features=512, bias=True)
  (SA_modules_condition): ModuleList(
    (0): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (1): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(41, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(41, 41, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (2): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(73, 73, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): Conv2d(137, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (3): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(73, 128, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(73, 73, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
  )
  (encoder_feature_map): ModuleList(
    (0): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (1): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (2): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (3): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
  )
  (SA_modules): ModuleList(
    (0): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=32, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=32, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=64, bias=True)
          (res_connect): Conv2d(44, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(44, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(35, 35, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(44, 44, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(79, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (1): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=64, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=64, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=128, bias=True)
          (res_connect): Conv2d(105, 128, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(105, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(105, 105, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
            )
            (2): Conv2d(201, 128, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (2): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=128, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=256, bias=True)
          (res_connect): Conv2d(201, 256, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(201, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(201, 201, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 384, eps=1e-05, affine=True)
            )
            (2): Conv2d(393, 256, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (3): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=256, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=512, bias=True)
          (res_connect): Conv2d(329, 512, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(329, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(329, 329, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 640, eps=1e-05, affine=True)
            )
            (2): Conv2d(649, 512, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (5): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
  )
  (FP_modules_condition): ModuleList(
    (0): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(43, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(43, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(43, 43, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(39, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(39, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (1): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(75, 75, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 96, eps=1e-05, affine=True)
          )
          (2): Conv2d(107, 32, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (2): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(75, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(75, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(75, 75, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (3): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(139, 139, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
          )
          (2): Conv2d(203, 64, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (decoder_feature_map): ModuleList(
    (0): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (1): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (2): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (3): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (4): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=128, bias=True)
        (res_connect): Conv2d(171, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(171, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(171, 171, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
          )
          (2): Conv2d(203, 128, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=128, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
        (res_connect): Conv2d(134, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(134, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (1): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=128, bias=True)
        (res_connect): Conv2d(331, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(331, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(331, 331, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 384, eps=1e-05, affine=True)
          )
          (2): Conv2d(395, 128, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=128, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
        (res_connect): Conv2d(195, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(195, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (2): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=256, bias=True)
        (res_connect): Conv2d(331, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(331, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(331, 331, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 448, eps=1e-05, affine=True)
          )
          (2): Conv2d(459, 256, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=256, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
        (res_connect): Conv2d(387, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(387, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (3): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=256, bias=True)
        (res_connect): Conv2d(651, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(651, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(651, 651, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 896, eps=1e-05, affine=True)
          )
          (2): Conv2d(907, 256, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=256, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
        (res_connect): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fc_lyaer): Sequential(
    (0): Conv1d(163, 128, kernel_size=(1,), stride=(1,))
    (1): GroupNorm(32, 128, eps=1e-05, affine=True)
    (2): ReLU(inplace=True)
    (3): Conv1d(128, 3, kernel_size=(1,), stride=(1,))
  )
)
cuda:0
2023-03-17 22:13:31,234 - __main__ - INFO - PointNet2CloudCondition(
  (class_emb): Embedding(16, 128)
  (network_activation_function): ReLU(inplace=True)
  (global_pnet): Pnet2Stage(
    (mlp1): Mlp_plus_t_emb(
      (first_mlp): Sequential(
        (0): Conv2d(4, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
      (second_mlp): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
    )
    (mlp2): Mlp_plus_t_emb(
      (first_mlp): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
      (second_mlp): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 1024, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
    )
  )
  (fc_t1): Linear(in_features=128, out_features=512, bias=True)
  (fc_t2): Linear(in_features=512, out_features=512, bias=True)
  (SA_modules_condition): ModuleList(
    (0): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (1): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(41, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(41, 41, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (2): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(73, 73, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): Conv2d(137, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (3): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(73, 128, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(73, 73, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
  )
  (encoder_feature_map): ModuleList(
    (0): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (1): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (2): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (3): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
  )
  (SA_modules): ModuleList(
    (0): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=32, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=32, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=64, bias=True)
          (res_connect): Conv2d(44, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(44, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(35, 35, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(44, 44, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(79, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (1): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=64, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=64, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=128, bias=True)
          (res_connect): Conv2d(105, 128, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(105, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(105, 105, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
            )
            (2): Conv2d(201, 128, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (2): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=128, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=256, bias=True)
          (res_connect): Conv2d(201, 256, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(201, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(201, 201, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 384, eps=1e-05, affine=True)
            )
            (2): Conv2d(393, 256, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (3): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=256, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=512, bias=True)
          (res_connect): Conv2d(329, 512, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(329, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(329, 329, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 640, eps=1e-05, affine=True)
            )
            (2): Conv2d(649, 512, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (5): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
  )
  (FP_modules_condition): ModuleList(
    (0): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(43, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(43, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(43, 43, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(39, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(39, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (1): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(75, 75, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 96, eps=1e-05, affine=True)
          )
          (2): Conv2d(107, 32, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (2): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(75, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(75, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(75, 75, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (3): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(139, 139, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
          )
          (2): Conv2d(203, 64, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (decoder_feature_map): ModuleList(
    (0): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (1): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (2): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (3): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (4): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=128, bias=True)
        (res_connect): Conv2d(171, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(171, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(171, 171, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
          )
          (2): Conv2d(203, 128, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=128, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
        (res_connect): Conv2d(134, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(134, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (1): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=128, bias=True)
        (res_connect): Conv2d(331, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(331, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(331, 331, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 384, eps=1e-05, affine=True)
          )
          (2): Conv2d(395, 128, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=128, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
        (res_connect): Conv2d(195, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(195, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (2): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=256, bias=True)
        (res_connect): Conv2d(331, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(331, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(331, 331, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 448, eps=1e-05, affine=True)
          )
          (2): Conv2d(459, 256, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=256, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
        (res_connect): Conv2d(387, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(387, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (3): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=256, bias=True)
        (res_connect): Conv2d(651, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(651, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(651, 651, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 896, eps=1e-05, affine=True)
          )
          (2): Conv2d(907, 256, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=256, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
        (res_connect): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fc_lyaer): Sequential(
    (0): Conv1d(163, 128, kernel_size=(1,), stride=(1,))
    (1): GroupNorm(32, 128, eps=1e-05, affine=True)
    (2): ReLU(inplace=True)
    (3): Conv1d(128, 3, kernel_size=(1,), stride=(1,))
  )
)
2023-03-17 22:13:47,561 - __main__ - INFO - PointNet2CloudCondition(
  (class_emb): Embedding(16, 128)
  (network_activation_function): ReLU(inplace=True)
  (global_pnet): Pnet2Stage(
    (mlp1): Mlp_plus_t_emb(
      (first_mlp): Sequential(
        (0): Conv2d(4, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
      (second_mlp): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
    )
    (mlp2): Mlp_plus_t_emb(
      (first_mlp): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
      (second_mlp): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
        (1): MyGroupNorm(
          (group_norm): GroupNorm(32, 1024, eps=1e-05, affine=True)
        )
        (2): ReLU(inplace=True)
      )
    )
  )
  (fc_t1): Linear(in_features=128, out_features=512, bias=True)
  (fc_t2): Linear(in_features=512, out_features=512, bias=True)
  (SA_modules_condition): ModuleList(
    (0): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (1): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(41, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(41, 41, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (2): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(73, 73, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): Conv2d(137, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (3): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (res_connect): Conv2d(73, 128, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(73, 73, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
  )
  (encoder_feature_map): ModuleList(
    (0): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(13, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (1): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (2): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (3): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
  )
  (SA_modules): ModuleList(
    (0): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=32, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=32, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=64, bias=True)
          (res_connect): Conv2d(44, 64, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(44, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(35, 35, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(44, 44, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): Conv2d(79, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (1): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=64, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=64, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=128, bias=True)
          (res_connect): Conv2d(105, 128, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(105, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(105, 105, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
            )
            (2): Conv2d(201, 128, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (2): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=128, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=256, bias=True)
          (res_connect): Conv2d(201, 256, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(201, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(201, 201, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 384, eps=1e-05, affine=True)
            )
            (2): Conv2d(393, 256, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
    (3): PointnetSAModule(
      (groupers): ModuleList(
        (0): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Mlp_plus_t_emb(
          (fc): Linear(in_features=512, out_features=256, bias=True)
          (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
          (fc_second_condition): Linear(in_features=128, out_features=512, bias=True)
          (res_connect): Conv2d(329, 512, kernel_size=(1, 1), stride=(1, 1))
          (first_mlp): Sequential(
            (0): Conv2d(329, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (second_mlp): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
          (rest_mlp): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
      (attention_modules): ModuleList(
        (0): AttentionModule(
          (feat_conv): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          (grouped_feat_conv): Conv2d(329, 329, kernel_size=(1, 1), stride=(1, 1))
          (weight_conv): Sequential(
            (0): ReLU(inplace=True)
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 640, eps=1e-05, affine=True)
            )
            (2): Conv2d(649, 512, kernel_size=(1, 1), stride=(1, 1))
            (3): ReLU(inplace=True)
            (4): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (5): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          )
          (feat_out_conv): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): MyGroupNorm(
              (group_norm): GroupNorm(32, 512, eps=1e-05, affine=True)
            )
            (2): ReLU(inplace=True)
          )
        )
      )
    )
  )
  (FP_modules_condition): ModuleList(
    (0): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(43, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(43, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(43, 43, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(39, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(39, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (1): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(75, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(75, 75, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 96, eps=1e-05, affine=True)
          )
          (2): Conv2d(107, 32, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (5): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (2): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(75, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(75, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(75, 75, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (3): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (res_connect): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(139, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(139, 139, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
          )
          (2): Conv2d(203, 64, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (5): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (res_connect): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (decoder_feature_map): ModuleList(
    (0): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (1): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(41, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 32, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (2): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (3): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(73, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 64, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
    (4): FeatureMapModule(
      (mlp): Mlp_plus_t_emb(
        (res_connect): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(137, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mapper): QueryAndGroup()
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=128, bias=True)
        (res_connect): Conv2d(171, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(171, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(171, 171, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 192, eps=1e-05, affine=True)
          )
          (2): Conv2d(203, 128, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=128, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
        (res_connect): Conv2d(134, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(134, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (1): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=128, bias=True)
        (res_connect): Conv2d(331, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(331, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(331, 331, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 384, eps=1e-05, affine=True)
          )
          (2): Conv2d(395, 128, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (5): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=128, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=128, bias=True)
        (res_connect): Conv2d(195, 128, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(195, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 128, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (2): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=256, bias=True)
        (res_connect): Conv2d(331, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(331, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(331, 331, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 448, eps=1e-05, affine=True)
          )
          (2): Conv2d(459, 256, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=256, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
        (res_connect): Conv2d(387, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(387, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
    (3): PointnetKnnFPModule(
      (mlp1): Mlp_plus_t_emb(
        (fc_condition): Linear(in_features=128, out_features=256, bias=True)
        (res_connect): Conv2d(651, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(651, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (attention_module): AttentionModule(
        (feat_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (grouped_feat_conv): Conv2d(651, 651, kernel_size=(1, 1), stride=(1, 1))
        (weight_conv): Sequential(
          (0): ReLU(inplace=True)
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 896, eps=1e-05, affine=True)
          )
          (2): Conv2d(907, 256, kernel_size=(1, 1), stride=(1, 1))
          (3): ReLU(inplace=True)
          (4): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (5): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (feat_out_conv): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
      (mlp2): Mlp_plus_t_emb(
        (fc): Linear(in_features=512, out_features=256, bias=True)
        (fc_condition): Linear(in_features=1024, out_features=256, bias=True)
        (res_connect): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1))
        (first_mlp): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
        (second_mlp): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): MyGroupNorm(
            (group_norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          )
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fc_lyaer): Sequential(
    (0): Conv1d(163, 128, kernel_size=(1,), stride=(1,))
    (1): GroupNorm(32, 128, eps=1e-05, affine=True)
    (2): ReLU(inplace=True)
    (3): Conv1d(128, 3, kernel_size=(1,), stride=(1,))
  )
)
